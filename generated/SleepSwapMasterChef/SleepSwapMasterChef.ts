// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CancelOrder extends ethereum.Event {
  get params(): CancelOrder__Params {
    return new CancelOrder__Params(this);
  }
}

export class CancelOrder__Params {
  _event: CancelOrder;

  constructor(event: CancelOrder) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get orderId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get isBuy(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class OrderCreated extends ethereum.Event {
  get params(): OrderCreated__Params {
    return new OrderCreated__Params(this);
  }
}

export class OrderCreated__Params {
  _event: OrderCreated;

  constructor(event: OrderCreated) {
    this._event = event;
  }

  get orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get fromToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get toToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get user(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get isBuy(): boolean {
    return this._event.parameters[6].value.toBoolean();
  }

  get open(): boolean {
    return this._event.parameters[7].value.toBoolean();
  }

  get executed(): boolean {
    return this._event.parameters[8].value.toBoolean();
  }

  get orderHash(): string {
    return this._event.parameters[9].value.toString();
  }
}

export class OrderExecuted extends ethereum.Event {
  get params(): OrderExecuted__Params {
    return new OrderExecuted__Params(this);
  }
}

export class OrderExecuted__Params {
  _event: OrderExecuted;

  constructor(event: OrderExecuted) {
    this._event = event;
  }

  get orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get orderHash(): string {
    return this._event.parameters[1].value.toString();
  }

  get fromAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get toAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get positionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount0(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get fromAddress(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get toAddress(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get gridSize(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get positionId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SleepSwapMasterChef__ordersResult {
  value0: BigInt;
  value1: Address;
  value2: Address;
  value3: Address;
  value4: BigInt;
  value5: BigInt;
  value6: boolean;
  value7: boolean;
  value8: boolean;
  value9: string;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: Address,
    value3: Address,
    value4: BigInt,
    value5: BigInt,
    value6: boolean,
    value7: boolean,
    value8: boolean,
    value9: string
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    map.set("value8", ethereum.Value.fromBoolean(this.value8));
    map.set("value9", ethereum.Value.fromString(this.value9));
    return map;
  }
}

export class SleepSwapMasterChef extends ethereum.SmartContract {
  static bind(address: Address): SleepSwapMasterChef {
    return new SleepSwapMasterChef("SleepSwapMasterChef", address);
  }

  feePercent(): BigInt {
    let result = super.call("feePercent", "feePercent():(uint256)", []);

    return result[0].toBigInt();
  }

  try_feePercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("feePercent", "feePercent():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  manager(): Address {
    let result = super.call("manager", "manager():(address)", []);

    return result[0].toAddress();
  }

  try_manager(): ethereum.CallResult<Address> {
    let result = super.tryCall("manager", "manager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  orders(param0: BigInt): SleepSwapMasterChef__ordersResult {
    let result = super.call(
      "orders",
      "orders(uint256):(uint256,address,address,address,uint256,uint256,bool,bool,bool,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new SleepSwapMasterChef__ordersResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBoolean(),
      result[7].toBoolean(),
      result[8].toBoolean(),
      result[9].toString()
    );
  }

  try_orders(
    param0: BigInt
  ): ethereum.CallResult<SleepSwapMasterChef__ordersResult> {
    let result = super.tryCall(
      "orders",
      "orders(uint256):(uint256,address,address,address,uint256,uint256,bool,bool,bool,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SleepSwapMasterChef__ordersResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBoolean(),
        value[7].toBoolean(),
        value[8].toBoolean(),
        value[9].toString()
      )
    );
  }

  ordersCount(): BigInt {
    let result = super.call("ordersCount", "ordersCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ordersCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ordersCount", "ordersCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolFee(): i32 {
    let result = super.call("poolFee", "poolFee():(uint24)", []);

    return result[0].toI32();
  }

  try_poolFee(): ethereum.CallResult<i32> {
    let result = super.tryCall("poolFee", "poolFee():(uint24)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  positionToOrders(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "positionToOrders",
      "positionToOrders(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_positionToOrders(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "positionToOrders",
      "positionToOrders(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  positionsCount(): BigInt {
    let result = super.call("positionsCount", "positionsCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_positionsCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "positionsCount",
      "positionsCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenBalance(): BigInt {
    let result = super.call("tokenBalance", "tokenBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenBalance", "tokenBalance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenBalances(param0: Address): BigInt {
    let result = super.call(
      "tokenBalances",
      "tokenBalances(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_tokenBalances(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenBalances",
      "tokenBalances(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenFees(): BigInt {
    let result = super.call("tokenFees", "tokenFees():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenFees(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenFees", "tokenFees():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  usdtBalance(): BigInt {
    let result = super.call("usdtBalance", "usdtBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_usdtBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("usdtBalance", "usdtBalance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  usdtFees(): BigInt {
    let result = super.call("usdtFees", "usdtFees():(uint256)", []);

    return result[0].toBigInt();
  }

  try_usdtFees(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("usdtFees", "usdtFees():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userPosition(param0: Address): BigInt {
    let result = super.call("userPosition", "userPosition(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_userPosition(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userPosition",
      "userPosition(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userTokenBalances(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "userTokenBalances",
      "userTokenBalances(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_userTokenBalances(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userTokenBalances",
      "userTokenBalances(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _manager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddManagerCall extends ethereum.Call {
  get inputs(): AddManagerCall__Inputs {
    return new AddManagerCall__Inputs(this);
  }

  get outputs(): AddManagerCall__Outputs {
    return new AddManagerCall__Outputs(this);
  }
}

export class AddManagerCall__Inputs {
  _call: AddManagerCall;

  constructor(call: AddManagerCall) {
    this._call = call;
  }

  get _manager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddManagerCall__Outputs {
  _call: AddManagerCall;

  constructor(call: AddManagerCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class StartStrategyCall extends ethereum.Call {
  get inputs(): StartStrategyCall__Inputs {
    return new StartStrategyCall__Inputs(this);
  }

  get outputs(): StartStrategyCall__Outputs {
    return new StartStrategyCall__Outputs(this);
  }
}

export class StartStrategyCall__Inputs {
  _call: StartStrategyCall;

  constructor(call: StartStrategyCall) {
    this._call = call;
  }

  get _buyPrices(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _sellPrices(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _amount0(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _amount1(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _fromTokenAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _toTokenAddress(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class StartStrategyCall__Outputs {
  _call: StartStrategyCall;

  constructor(call: StartStrategyCall) {
    this._call = call;
  }
}

export class StartStrategyWithDepositCall extends ethereum.Call {
  get inputs(): StartStrategyWithDepositCall__Inputs {
    return new StartStrategyWithDepositCall__Inputs(this);
  }

  get outputs(): StartStrategyWithDepositCall__Outputs {
    return new StartStrategyWithDepositCall__Outputs(this);
  }
}

export class StartStrategyWithDepositCall__Inputs {
  _call: StartStrategyWithDepositCall;

  constructor(call: StartStrategyWithDepositCall) {
    this._call = call;
  }

  get _buyPrices(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _sellPrices(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _amount0(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _amount1(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _fromTokenAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _toTokenAddress(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class StartStrategyWithDepositCall__Outputs {
  _call: StartStrategyWithDepositCall;

  constructor(call: StartStrategyWithDepositCall) {
    this._call = call;
  }
}

export class StopStrategyCall extends ethereum.Call {
  get inputs(): StopStrategyCall__Inputs {
    return new StopStrategyCall__Inputs(this);
  }

  get outputs(): StopStrategyCall__Outputs {
    return new StopStrategyCall__Outputs(this);
  }
}

export class StopStrategyCall__Inputs {
  _call: StopStrategyCall;

  constructor(call: StopStrategyCall) {
    this._call = call;
  }
}

export class StopStrategyCall__Outputs {
  _call: StopStrategyCall;

  constructor(call: StopStrategyCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateManagerCall extends ethereum.Call {
  get inputs(): UpdateManagerCall__Inputs {
    return new UpdateManagerCall__Inputs(this);
  }

  get outputs(): UpdateManagerCall__Outputs {
    return new UpdateManagerCall__Outputs(this);
  }
}

export class UpdateManagerCall__Inputs {
  _call: UpdateManagerCall;

  constructor(call: UpdateManagerCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateManagerCall__Outputs {
  _call: UpdateManagerCall;

  constructor(call: UpdateManagerCall) {
    this._call = call;
  }
}

export class UpdateOrderStatusCall extends ethereum.Call {
  get inputs(): UpdateOrderStatusCall__Inputs {
    return new UpdateOrderStatusCall__Inputs(this);
  }

  get outputs(): UpdateOrderStatusCall__Outputs {
    return new UpdateOrderStatusCall__Outputs(this);
  }
}

export class UpdateOrderStatusCall__Inputs {
  _call: UpdateOrderStatusCall;

  constructor(call: UpdateOrderStatusCall) {
    this._call = call;
  }

  get _orderId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _orderHash(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _expectedOutput(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpdateOrderStatusCall__Outputs {
  _call: UpdateOrderStatusCall;

  constructor(call: UpdateOrderStatusCall) {
    this._call = call;
  }
}

export class WithdrawUserFundsCall extends ethereum.Call {
  get inputs(): WithdrawUserFundsCall__Inputs {
    return new WithdrawUserFundsCall__Inputs(this);
  }

  get outputs(): WithdrawUserFundsCall__Outputs {
    return new WithdrawUserFundsCall__Outputs(this);
  }
}

export class WithdrawUserFundsCall__Inputs {
  _call: WithdrawUserFundsCall;

  constructor(call: WithdrawUserFundsCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawUserFundsCall__Outputs {
  _call: WithdrawUserFundsCall;

  constructor(call: WithdrawUserFundsCall) {
    this._call = call;
  }
}
